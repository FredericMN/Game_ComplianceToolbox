name: Build and Release ComplianceToolbox

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'  # 监听以 v 开头的标签，如 v1.0.0
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  actions: write

jobs:
  build:

    runs-on: windows-latest  

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Ensure requirements.txt is UTF-8 encoded
      shell: pwsh
      run: |
        Get-Content requirements.txt | Out-File -FilePath requirements.txt -Encoding utf8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install additional dependencies
      run: |
        pip install selenium PySide6 "PySide6-Fluent-Widgets[full]" psutil openpyxl webdriver-manager pandas xlrd requests pyinstaller python-docx -i https://pypi.org/simple/

    - name: Verify PyInstaller installation
      run: |
        python -m pip show pyinstaller || python -m pip install pyinstaller

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --name "ComplianceToolbox" --windowed --icon=resources/logo.ico `
          --add-data "resources;resources" --add-data "styles;styles" `
          --add-data "CHANGELOG.md;." `
          --hidden-import=psutil --hidden-import=selenium.webdriver.edge.service `
          --hidden-import=PySide6.QtCore --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtWidgets --hidden-import=qfluentwidgets --hidden-import=openpyxl `
          --hidden-import=webdriver_manager --hidden-import=pandas --hidden-import=xlrd --hidden-import=requests `
          --hidden-import=docx --hidden-import=python-docx `
          main.py

    - name: List build directory
      run: |
        dir dist

    - name: Verify executable exists
      run: |
        if (-not (Test-Path "dist\ComplianceToolbox\ComplianceToolbox.exe")) {
            Write-Output "Executable not found!"
            exit 1
        }

    - name: Compress build output
      run: |
        cd dist\ComplianceToolbox
        Compress-Archive -Path "*" -DestinationPath "..\ComplianceToolbox_temp.zip"
        cd ..  # 返回 dist 目录
        Move-Item -Path "ComplianceToolbox_temp.zip" -Destination "ComplianceToolbox.zip"
        dir

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ComplianceToolbox
        path: dist/ComplianceToolbox.zip

    # 自动发布到 GitHub Releases
    - name: Read CHANGELOG
      id: changelog
      shell: pwsh
      run: |
        $content = Get-Content 'CHANGELOG.md' -Raw
        $regex = "(?s)(?<=##\s${{ github.ref_name }}\s).+?(?=##)"
        if ($content -match $regex) {
            $matches[0] | Out-File -FilePath release_notes.txt
        } else {
            $content | Out-File -FilePath release_notes.txt
        }

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/ComplianceToolbox.zip
        body_path: release_notes.txt
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
