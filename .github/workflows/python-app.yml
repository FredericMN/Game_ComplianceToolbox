name: Python application

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'  # 监听以v开头的标签，如v1.0.0
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: write

jobs:
  build:

    runs-on: windows-2022  # 使用Windows Server 2022 Runner

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Ensure requirements.txt is UTF-8 encoded
      run: |
        Get-Content requirements.txt | Out-File -FilePath requirements.txt -Encoding utf8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 移除以下行，因为所有依赖应在requirements.txt中列出
        # pip install flake8 pytest pyinstaller requests

    - name: Lint with flake8
      run: |
        # 停止构建如果有语法错误或未定义的名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero将所有错误视为警告
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      continue-on-error: true  # 允许测试失败，不会中断工作流。
      run: |
        pytest || echo "No tests were run."

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --name "ComplianceToolbox" --windowed --icon=resources/logo.ico `
          --add-data "resources;resources" --add-data "styles;styles" `
          --hidden-import=psutil --hidden-import=selenium.webdriver.edge.service `
          --hidden-import=PySide6.QtCore --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtWidgets `
          main.py

    - name: List dist directory
      run: |
        dir dist

    - name: Verify executable exists
      run: |
        if (-not (Test-Path "dist\ComplianceToolbox.exe")) {
            Write-Output "Executable not found!"
            exit 1
        }

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ComplianceToolbox
        path: dist/ComplianceToolbox.exe

    # 自动发布到GitHub Releases
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/ComplianceToolbox.exe
        asset_name: ComplianceToolbox.exe
        asset_content_type: application/octet-stream
