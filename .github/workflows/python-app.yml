name: Build and Release ComplianceToolbox

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'  # 监听以 v 开头的标签，如 v1.0.0
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  actions: write

jobs:
  build:

    runs-on: windows-latest  

    steps:
    - uses: actions/checkout@v4

    - name: Install 7-Zip
      shell: pwsh
      run: |
        # 检查 Chocolatey 是否已安装
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Output "Chocolatey 未安装，正在安装 Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        } else {
          Write-Output "Chocolatey 已安装。"
        }

        # 定义重试参数
        $maxRetries = 3
        $retryCount = 0
        $success = $false

        while ($retryCount -lt $maxRetries -and -not $success) {
          try {
            Write-Output "尝试安装 7-Zip，尝试次数：$($retryCount + 1)"
            choco install 7zip -y --ignore-checksums
            $success = $true
            Write-Output "7-Zip 安装成功。"
          } catch {
            $retryCount++
            Write-Output "7-Zip 安装失败。尝试次数：$retryCount/$maxRetries"
            if ($retryCount -lt $maxRetries) {
              $delay = 10
              Write-Output "等待 $delay 秒后重试..."
              Start-Sleep -Seconds $delay
            } else {
              Write-Error "已达到最大重试次数，7-Zip 安装失败。"
              exit 1
            }
          }
        }

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Ensure requirements.txt is UTF-8 encoded
      shell: pwsh
      run: |
        Get-Content requirements.txt | Out-File -FilePath requirements.txt -Encoding utf8

    # 设置标准构建环境
    - name: Set up Standard Build Environment
      shell: pwsh
      run: |
        python -m venv standard_env
        .\standard_env\Scripts\Activate.ps1
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium PySide6 "PySide6-Fluent-Widgets[full]" psutil openpyxl webdriver-manager pandas xlrd requests pyinstaller python-docx transformers torch huggingface_hub py7zr zhipuai -i https://pypi.org/simple/
        # 确保 py7zr 被安装

    - name: Build Standard Executable with PyInstaller
      shell: pwsh
      run: |
        .\standard_env\Scripts\Activate.ps1
        pyinstaller --name "ComplianceToolbox_standard" --windowed --icon=resources/logo.ico `
          --add-data "resources;resources" --add-data "styles;styles" `
          --add-data "CHANGELOG.md;." `
          --hidden-import=psutil --hidden-import=selenium.webdriver.edge.service `
          --hidden-import=PySide6.QtCore --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtWidgets --hidden-import=qfluentwidgets `
          --hidden-import=openpyxl --hidden-import=webdriver_manager `
          --hidden-import=pandas --hidden-import=xlrd --hidden-import=requests `
          --hidden-import=docx --hidden-import=python-docx --hidden-import=transformers `
          --hidden-import=torch --hidden-import=huggingface_hub --hidden-import=py7zr --hidden-import=zhipuai `
          main.py

    - name: Compress Standard Build Output
      shell: pwsh
      run: |
        Compress-Archive -Path "dist\ComplianceToolbox_standard\*" -DestinationPath "ComplianceToolbox_standard.zip"
        Remove-Item -Recurse -Force "dist\ComplianceToolbox_standard"

    - name: Upload Standard Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ComplianceToolbox_standard
        path: ComplianceToolbox_standard.zip

    # 设置 CUDA 构建环境
    - name: Set up CUDA Build Environment
      shell: pwsh
      run: |
        python -m venv cuda_env
        .\cuda_env\Scripts\Activate.ps1
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium PySide6 "PySide6-Fluent-Widgets[full]" psutil openpyxl webdriver-manager pandas xlrd requests pyinstaller python-docx transformers huggingface_hub py7zr zhipuai
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

    - name: Build CUDA Executable with PyInstaller
      shell: pwsh
      run: |
        .\cuda_env\Scripts\Activate.ps1
        pyinstaller --name "ComplianceToolbox_cuda" --windowed --icon=resources/logo.ico `
          --add-data "resources;resources" --add-data "styles;styles" `
          --add-data "CHANGELOG.md;." `
          --hidden-import=psutil --hidden-import=selenium.webdriver.edge.service `
          --hidden-import=PySide6.QtCore --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtWidgets --hidden-import=qfluentwidgets `
          --hidden-import=openpyxl --hidden-import=webdriver_manager `
          --hidden-import=pandas --hidden-import=xlrd --hidden-import=requests `
          --hidden-import=docx --hidden-import=python-docx --hidden-import=transformers `
          --hidden-import=torch --hidden-import=huggingface_hub --hidden-import=py7zr --hidden-import=zhipuai `
          main.py

    - name: Compress CUDA Build Output with 7z
      shell: pwsh
      run: |
        # 导航到构建输出目录
        Push-Location "dist\ComplianceToolbox_cuda"
        # 使用 7z 压缩当前目录下的所有文件到上级目录
        & 'C:\Program Files\7-Zip\7z.exe' a -t7z "..\..\ComplianceToolbox_cuda.7z" * -mx=9
        # 返回原始目录
        Pop-Location
        # 移除构建输出目录
        Remove-Item -Recurse -Force "dist\ComplianceToolbox_cuda"

    - name: Upload CUDA Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ComplianceToolbox_cuda
        path: ComplianceToolbox_cuda.7z

    # 自动发布到 GitHub Releases
    - name: Read CHANGELOG
      id: changelog
      shell: pwsh
      run: |
        $content = Get-Content 'CHANGELOG.md' -Raw
        $current_tag = "${{ github.ref_name }}"
        $regex = "(?s)(?<=##\s$current_tag\s).+?(?=##)"
        if ($content -match $regex) {
            $matches[0] | Out-File -FilePath release_notes.txt
        } else {
            $content | Out-File -FilePath release_notes.txt
        }

    - name: Download Standard Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: ComplianceToolbox_standard
        path: .

    - name: Download CUDA Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: ComplianceToolbox_cuda
        path: .

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ComplianceToolbox_standard.zip
          ComplianceToolbox_cuda.7z
        body_path: release_notes.txt
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_PAT }}
